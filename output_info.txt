Buscando carpetas con código fuente...
--------------------------------------------------------------

📁 Carpeta procesada: ./src
Estructura completa:
./src
├── app.controller.spec.ts
├── app.controller.ts
├── app.module.ts
├── app.service.ts
├── games
│   ├── dto
│   │   ├── create-game.dto.ts
│   │   └── update-game.dto.ts
│   ├── entities
│   │   └── game.entity.ts
│   ├── games.controller.spec.ts
│   ├── games.controller.ts
│   ├── games.module.ts
│   ├── games.service.spec.ts
│   └── games.service.ts
├── main.ts
├── permissions
│   ├── dto
│   │   ├── create-permission.dto.ts
│   │   └── update-permission.dto.ts
│   ├── entities
│   │   └── permission.entity.ts
│   ├── permissions.controller.spec.ts
│   ├── permissions.controller.ts
│   ├── permissions.module.ts
│   ├── permissions.service.spec.ts
│   └── permissions.service.ts
├── roles
│   ├── dto
│   │   ├── create-role.dto.ts
│   │   └── update-role.dto.ts
│   ├── entities
│   │   └── role.entity.ts
│   ├── roles.controller.spec.ts
│   ├── roles.controller.ts
│   ├── roles.module.ts
│   ├── roles.service.spec.ts
│   └── roles.service.ts
└── users
    ├── dto
    │   ├── create-user.dto.ts
    │   └── update-user.dto.ts
    ├── entities
    │   └── user.entity.ts
    ├── users.controller.spec.ts
    ├── users.controller.ts
    ├── users.module.ts
    ├── users.service.spec.ts
    └── users.service.ts

13 directories, 37 files

🧾 Archivos de código en ./src (con contenido):

./src/app.controller.ts

import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}

--------------------------------------------------


./src/app.module.ts

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { UsersModule } from './users/users.module';
import { RolesModule } from './roles/roles.module';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { PermissionsModule } from './permissions/permissions.module';
import { GamesModule } from './games/games.module';

//Hola
type SupportedDbTypes =
    | 'mysql'
    | 'postgres'
    | 'sqlite'
    | 'mariadb'
    | 'mongodb'
    | 'oracle';

@Module({
    imports: [
        ConfigModule.forRoot({ isGlobal: true }),
        UsersModule,
        RolesModule,
        TypeOrmModule.forRootAsync({
            imports: [ConfigModule],
            inject: [ConfigService],
            useFactory: (configService: ConfigService) => ({
                type: configService.get<SupportedDbTypes>('DB_TYPE') ?? 'mysql',
                host: configService.get<string>('DB_HOST') ?? 'localhost',
                port: configService.get<number>('DB_PORT') ?? 5432,
                username: configService.get<string>('DB_USERNAME') ?? 'root',
                password: configService.get<string>('DB_PASSWORD') ?? 'root',
                database: configService.get<string>('DB_DATABASE') ?? 'test',
                entities: [__dirname + '/**/*.entity{.ts,.js}'],
                synchronize:
                    configService.get<boolean>('DB_SYNCHRONIZE') ?? false,
            }),
        }),
        PermissionsModule,
        GamesModule,
    ],
    controllers: [AppController],
    providers: [AppService],
})
export class AppModule {}

--------------------------------------------------


./src/app.service.ts

import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}

--------------------------------------------------


./src/main.ts

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

--------------------------------------------------


./src/app.controller.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', () => {
      expect(appController.getHello()).toBe('Hello World!');
    });
  });
});

--------------------------------------------------


./src/users/users.controller.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';

describe('UsersController', () => {
  let controller: UsersController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UsersController],
      providers: [UsersService],
    }).compile();

    controller = module.get<UsersController>(UsersController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});

--------------------------------------------------


./src/users/users.controller.ts

import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';

@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }

  @Get()
  findAll() {
    return this.usersService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.usersService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {
    return this.usersService.update(+id, updateUserDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.usersService.remove(+id);
  }
}

--------------------------------------------------


./src/users/users.module.ts

import { Module } from '@nestjs/common';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from './entities/user.entity';
import { RolesModule } from 'src/roles/roles.module';

@Module({
    imports: [TypeOrmModule.forFeature([User]), RolesModule],
    controllers: [UsersController],
    providers: [UsersService],
})
export class UsersModule {}

--------------------------------------------------


./src/users/users.service.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';

describe('UsersService', () => {
  let service: UsersService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService],
    }).compile();

    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});

--------------------------------------------------


./src/users/users.service.ts

import { Injectable } from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from './entities/user.entity';
import { RolesService } from '../roles/roles.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

@Injectable()
export class UsersService {
    constructor(
        @InjectRepository(User)
        private readonly userRepository: Repository<User>,
        private rolesService: RolesService,
    ) {}

    async create(createUserDto: CreateUserDto) {
        const role = await this.rolesService.findByName(createUserDto.roleName);
        if (!role) {
            throw new Error('Role not found');
        }

        const newUser = this.userRepository.create({
            ...createUserDto,
            role,
        });
        return await this.userRepository.save(newUser);
    }

    findAll() {
        return this.userRepository.find();
    }

    findOne(id: number) {
        return this.userRepository.findOne({ where: { id } });
    }

    async update(id: number, updateUserDto: UpdateUserDto) {
        await this.userRepository.update(id, updateUserDto);
        return this.findOne(id);
    }

    async remove(id: number) {
        const result = await this.userRepository.delete(id);
        if (result.affected) {
            return { id };
        }
        return null;
    }
}

--------------------------------------------------


./src/users/dto/create-user.dto.ts

export class CreateUserDto {
    username: string;
    email: string;
    passwordHash: string;
    bio: string;
    createdAt: Date;
    roleName: string;
}

--------------------------------------------------


./src/users/dto/update-user.dto.ts

import { PartialType } from '@nestjs/mapped-types';
import { CreateUserDto } from './create-user.dto';

export class UpdateUserDto extends PartialType(CreateUserDto) {}

--------------------------------------------------


./src/users/entities/user.entity.ts

import { Role } from 'src/roles/entities/role.entity';
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    CreateDateColumn,
    ManyToOne,
    JoinColumn,
} from 'typeorm';

@Entity('users')
export class User {
    @PrimaryGeneratedColumn()
    id: number;

    @Column({ unique: true })
    username: string;

    @Column({ unique: true })
    email: string;

    @Column()
    passwordHash: string;

    @Column({ nullable: true })
    bio: string;

    @CreateDateColumn()
    createdAt: Date;

    @ManyToOne(() => Role, (role) => role.users, { eager: true })
    @JoinColumn({ name: 'role_id' })
    role: Role;
}

--------------------------------------------------


./src/roles/roles.controller.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { RolesController } from './roles.controller';
import { RolesService } from './roles.service';

describe('RolesController', () => {
    let controller: RolesController;
    const mockRolesService = {
        create: jest.fn(),
        findAll: jest.fn(),
        findOne: jest.fn(),
        update: jest.fn(),
        remove: jest.fn(),
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            controllers: [RolesController],
            providers: [{ provide: RolesService, useValue: mockRolesService }],
        }).compile();

        controller = module.get<RolesController>(RolesController);
    });

    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
});

--------------------------------------------------


./src/roles/roles.controller.ts

import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { RolesService } from './roles.service';
import { CreateRoleDto } from './dto/create-role.dto';
import { UpdateRoleDto } from './dto/update-role.dto';

@Controller('roles')
export class RolesController {
  constructor(private readonly rolesService: RolesService) {}

  @Post()
  create(@Body() createRoleDto: CreateRoleDto) {
    return this.rolesService.create(createRoleDto);
  }

  @Get()
  findAll() {
    return this.rolesService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.rolesService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {
    return this.rolesService.update(+id, updateRoleDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.rolesService.remove(+id);
  }
}

--------------------------------------------------


./src/roles/roles.module.ts

import { Module } from '@nestjs/common';
import { RolesService } from './roles.service';
import { RolesController } from './roles.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Role } from './entities/role.entity';
import { PermissionsModule } from 'src/permissions/permissions.module';

@Module({
    imports: [TypeOrmModule.forFeature([Role]), PermissionsModule],
    controllers: [RolesController],
    providers: [RolesService],
    exports: [RolesService]
})
export class RolesModule {}

--------------------------------------------------


./src/roles/roles.service.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { RolesService } from './roles.service';
import { Role } from './entities/role.entity';

const mockRepository = {
    find: jest.fn(),
    findOne: jest.fn(),
    save: jest.fn(),
};

describe('RolesService', () => {
    let service: RolesService;

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [
                RolesService,
                {
                    provide: getRepositoryToken(Role),
                    useValue: mockRepository,
                },
            ],
        }).compile();

        service = module.get<RolesService>(RolesService);
    });

    it('should be defined', () => {
        expect(service).toBeDefined();
    });
});

--------------------------------------------------


./src/roles/roles.service.ts

import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CreateRoleDto } from './dto/create-role.dto';
import { UpdateRoleDto } from './dto/update-role.dto';
import { Role } from './entities/role.entity';

@Injectable()
export class RolesService {
    constructor(
        @InjectRepository(Role)
        private readonly roleRepository: Repository<Role>,
    ) {}

    async create(createRoleDto: CreateRoleDto): Promise<Role> {
        const newRole = this.roleRepository.create(createRoleDto);
        return await this.roleRepository.save(newRole);
    }

    async findAll(): Promise<Role[]> {
        return await this.roleRepository.find();
    }

    async findOne(id: number): Promise<Role | null> {
        return await this.roleRepository.findOneBy({ id });
    }

    async update(
        id: number,
        updateRoleDto: UpdateRoleDto,
    ): Promise<Role | null> {
        await this.roleRepository.update(id, updateRoleDto);
        return await this.roleRepository.findOneBy({ id });
    }

    async remove(id: number): Promise<{ id: number } | null> {
        const result = await this.roleRepository.delete(id);
        if (result.affected) {
            return { id };
        }
        return null;
    }

    async findByName(name: string): Promise<Role | null> {
        return await this.roleRepository.findOneBy({ name });
    }
    
}

--------------------------------------------------


./src/roles/dto/create-role.dto.ts

export class CreateRoleDto {
    name: string
    description: string
}

--------------------------------------------------


./src/roles/dto/update-role.dto.ts

import { PartialType } from '@nestjs/mapped-types';
import { CreateRoleDto } from './create-role.dto';

export class UpdateRoleDto extends PartialType(CreateRoleDto) {}

--------------------------------------------------


./src/roles/entities/role.entity.ts

import { Permission } from 'src/permissions/entities/permission.entity';
import { User } from 'src/users/entities/user.entity';
import { Entity, PrimaryGeneratedColumn, Column, OneToMany, ManyToMany, JoinTable } from 'typeorm';

@Entity()
export class Role {
    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column()
    description: string;

    @OneToMany(() => User, (user) => user.role)
    users: User[];

    @ManyToMany(() => Permission, (permission) => permission.roles)
    @JoinTable()
    permissions: Permission[];
}

--------------------------------------------------


./src/permissions/permissions.controller.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { PermissionsController } from './permissions.controller';
import { PermissionsService } from './permissions.service';

describe('PermissionsController', () => {
  let controller: PermissionsController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [PermissionsController],
      providers: [PermissionsService],
    }).compile();

    controller = module.get<PermissionsController>(PermissionsController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});

--------------------------------------------------


./src/permissions/permissions.controller.ts

import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { PermissionsService } from './permissions.service';
import { CreatePermissionDto } from './dto/create-permission.dto';
import { UpdatePermissionDto } from './dto/update-permission.dto';

@Controller('permissions')
export class PermissionsController {
  constructor(private readonly permissionsService: PermissionsService) {}

  @Post()
  create(@Body() createPermissionDto: CreatePermissionDto) {
    return this.permissionsService.create(createPermissionDto);
  }

  @Get()
  findAll() {
    return this.permissionsService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.permissionsService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updatePermissionDto: UpdatePermissionDto) {
    return this.permissionsService.update(+id, updatePermissionDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.permissionsService.remove(+id);
  }
}

--------------------------------------------------


./src/permissions/permissions.module.ts

import { Module } from '@nestjs/common';
import { PermissionsService } from './permissions.service';
import { PermissionsController } from './permissions.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Permission } from './entities/permission.entity';

@Module({
  imports:[TypeOrmModule.forFeature([Permission])],
  controllers: [PermissionsController],
  providers: [PermissionsService],
  exports: [PermissionsService]
})
export class PermissionsModule {}

--------------------------------------------------


./src/permissions/permissions.service.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { PermissionsService } from './permissions.service';

describe('PermissionsService', () => {
  let service: PermissionsService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PermissionsService],
    }).compile();

    service = module.get<PermissionsService>(PermissionsService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});

--------------------------------------------------


./src/permissions/permissions.service.ts

import { Injectable } from '@nestjs/common';
import { CreatePermissionDto } from './dto/create-permission.dto';
import { UpdatePermissionDto } from './dto/update-permission.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Permission } from './entities/permission.entity';
import { Repository } from 'typeorm';

@Injectable()
export class PermissionsService {

  constructor(
    @InjectRepository(Permission)
    private readonly permissionsRepository: Repository<Permission>,
  ){}

  async create(createPermissionDto: CreatePermissionDto) {
    const newPermission = this.permissionsRepository.create({
      ...createPermissionDto
    })

    return await this.permissionsRepository.save(newPermission);
  }

  async findAll() {
    return this.permissionsRepository.find();
  }

  async findOne(id: number) {
    return this.permissionsRepository.findOne({ where: { id } });
  }

  async update(id: number, updatePermissionDto: UpdatePermissionDto) {
    await this.permissionsRepository.update(id, updatePermissionDto);
  
    return this.findOne(id);
  }

  async remove(id: number) {
    const result = await this.permissionsRepository.delete(id);

    if(result.affected){
      return { id };
    }

    return null;
  }
}

--------------------------------------------------


./src/permissions/dto/create-permission.dto.ts

export class CreatePermissionDto {
    name: string;
    description: string;
}

--------------------------------------------------


./src/permissions/dto/update-permission.dto.ts

import { PartialType } from '@nestjs/mapped-types';
import { CreatePermissionDto } from './create-permission.dto';

export class UpdatePermissionDto extends PartialType(CreatePermissionDto) {}

--------------------------------------------------


./src/permissions/entities/permission.entity.ts

import { Role } from 'src/roles/entities/role.entity';
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
} from 'typeorm';

@Entity('permissions')
export class Permission {
    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column()
    description: string;

    @ManyToMany(() => Role, (role) => role.permissions)
    roles: Role[];
}

--------------------------------------------------


./src/games/games.controller.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { GamesController } from './games.controller';
import { GamesService } from './games.service';

describe('GamesController', () => {
  let controller: GamesController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [GamesController],
      providers: [GamesService],
    }).compile();

    controller = module.get<GamesController>(GamesController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});

--------------------------------------------------


./src/games/games.controller.ts

import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { GamesService } from './games.service';
import { CreateGameDto } from './dto/create-game.dto';
import { UpdateGameDto } from './dto/update-game.dto';

@Controller('games')
export class GamesController {
  constructor(private readonly gamesService: GamesService) {}

  @Post()
  create(@Body() createGameDto: CreateGameDto) {
    return this.gamesService.create(createGameDto);
  }

  @Get()
  findAll() {
    return this.gamesService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.gamesService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateGameDto: UpdateGameDto) {
    return this.gamesService.update(+id, updateGameDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.gamesService.remove(+id);
  }
}

--------------------------------------------------


./src/games/games.module.ts

import { Module } from '@nestjs/common';
import { GamesService } from './games.service';
import { GamesController } from './games.controller';

@Module({
  controllers: [GamesController],
  providers: [GamesService],
})
export class GamesModule {}

--------------------------------------------------


./src/games/games.service.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { GamesService } from './games.service';

describe('GamesService', () => {
  let service: GamesService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [GamesService],
    }).compile();

    service = module.get<GamesService>(GamesService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});

--------------------------------------------------


./src/games/games.service.ts

import { Injectable } from '@nestjs/common';
import { CreateGameDto } from './dto/create-game.dto';
import { UpdateGameDto } from './dto/update-game.dto';

@Injectable()
export class GamesService {
  create(createGameDto: CreateGameDto) {
    return 'This action adds a new game';
  }

  findAll() {
    return `This action returns all games`;
  }

  findOne(id: number) {
    return `This action returns a #${id} game`;
  }

  update(id: number, updateGameDto: UpdateGameDto) {
    return `This action updates a #${id} game`;
  }

  remove(id: number) {
    return `This action removes a #${id} game`;
  }
}

--------------------------------------------------


./src/games/dto/create-game.dto.ts

export class CreateGameDto {}

--------------------------------------------------


./src/games/dto/update-game.dto.ts

import { PartialType } from '@nestjs/mapped-types';
import { CreateGameDto } from './create-game.dto';

export class UpdateGameDto extends PartialType(CreateGameDto) {}

--------------------------------------------------


./src/games/entities/game.entity.ts

export class Game {}

--------------------------------------------------

❌ Excluyendo carpeta: ./node_modules/@eslint/js/src
❌ Excluyendo carpeta: ./node_modules/@humanwhocodes/module-importer/src
❌ Excluyendo carpeta: ./node_modules/@humanfs/core/src
❌ Excluyendo carpeta: ./node_modules/@humanfs/node/src
❌ Excluyendo carpeta: ./node_modules/@jest/pattern/src
❌ Excluyendo carpeta: ./node_modules/@jest/snapshot-utils/src
❌ Excluyendo carpeta: ./node_modules/@babel/core/src
❌ Excluyendo carpeta: ./node_modules/@jridgewell/gen-mapping/src
❌ Excluyendo carpeta: ./node_modules/@jridgewell/remapping/src
❌ Excluyendo carpeta: ./node_modules/@jridgewell/sourcemap-codec/src
❌ Excluyendo carpeta: ./node_modules/@jridgewell/source-map/src
❌ Excluyendo carpeta: ./node_modules/@jridgewell/trace-mapping/src
❌ Excluyendo carpeta: ./node_modules/@sinonjs/fake-timers/src
❌ Excluyendo carpeta: ./node_modules/@webassemblyjs/helper-numbers/src
❌ Excluyendo carpeta: ./node_modules/@webassemblyjs/ieee754/src
❌ Excluyendo carpeta: ./node_modules/@webassemblyjs/utf8/src
❌ Excluyendo carpeta: ./node_modules/@xtuc/long/src
❌ Excluyendo carpeta: ./node_modules/webpack/node_modules/ajv-keywords/src
❌ Excluyendo carpeta: ./node_modules/webpack/node_modules/ajv-formats/src
❌ Excluyendo carpeta: ./node_modules/@bcoe/v8-coverage/src
❌ Excluyendo carpeta: ./node_modules/@paralleldrive/cuid2/src
❌ Excluyendo carpeta: ./node_modules/@noble/hashes/src
❌ Excluyendo carpeta: ./node_modules/terser-webpack-plugin/node_modules/ajv-formats/src
❌ Excluyendo carpeta: ./node_modules/terser-webpack-plugin/node_modules/ajv-keywords/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/cli/node_modules/ajv-formats/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/cli/node_modules/ajv-keywords/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/cli/test/lib/compiler/hooks/fixtures/aliased-imports/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/application/files/js/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/application/files/ts/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/library/files/js/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/library/files/ts/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/sub-app/files/js/src
❌ Excluyendo carpeta: ./node_modules/@nestjs/schematics/dist/lib/sub-app/files/ts/src
❌ Excluyendo carpeta: ./node_modules/rxjs/src
❌ Excluyendo carpeta: ./node_modules/debug/src
❌ Excluyendo carpeta: ./node_modules/cli-table3/src
❌ Excluyendo carpeta: ./node_modules/ajv-formats/src
❌ Excluyendo carpeta: ./node_modules/comment-json/src
❌ Excluyendo carpeta: ./node_modules/array-timsort/src
❌ Excluyendo carpeta: ./node_modules/flat-cache/src
❌ Excluyendo carpeta: ./node_modules/keyv/src
❌ Excluyendo carpeta: ./node_modules/istanbul-lib-instrument/src
❌ Excluyendo carpeta: ./node_modules/istanbul-reports/lib/html-spa/src
❌ Excluyendo carpeta: ./node_modules/human-signals/build/src
❌ Excluyendo carpeta: ./node_modules/babel-preset-current-node-syntax/src
❌ Excluyendo carpeta: ./node_modules/formidable/src
❌ Excluyendo carpeta: ./node_modules/acorn-import-phases/src
❌ Excluyendo carpeta: ./node_modules/sprintf-js/src
❌ Excluyendo carpeta: ./node_modules/tsconfig-paths/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/schematics/node_modules/rxjs/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/schematics/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/core/node_modules/rxjs/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/core/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/schematics-cli/schematic/files/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/schematics-cli/blank/project-files/src
❌ Excluyendo carpeta: ./node_modules/@angular-devkit/schematics-cli/blank/schematic-files/src
❌ Excluyendo carpeta: ./node_modules/pg-cloudflare/src
❌ Excluyendo carpeta: ./node_modules/pg-protocol/src
